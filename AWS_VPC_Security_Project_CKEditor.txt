<h1>üåê AWS VPC Traffic Flow and Security Project</h1>

<p>A comprehensive networking project demonstrating Amazon VPC (Virtual Private Cloud) traffic control, route table configuration, and multi-layered security implementation using Security Groups and Network ACLs.</p>

<h2>üéØ Project Overview</h2>

<p>This project explores Amazon VPC networking fundamentals to control traffic flow between resources and the public internet. The focus is on implementing proper network segmentation, routing configurations, and security controls using VPC components.</p>

<p><strong>Duration:</strong> Approximately 2 hours<br>
<strong>Difficulty Level:</strong> Intermediate<br>
<strong>Author:</strong> Duc Thai<br>
<strong>Source:</strong> <a href="https://nextwork.org">NextWork.org</a></p>

<h2>üèóÔ∏è What is Amazon VPC?</h2>

<p>Amazon VPC is your private network in AWS that provides complete control over your virtual networking environment. Key capabilities include:</p>

<ul>
<li><strong>IP Range Selection</strong> - Choose your own IP address ranges</li>
<li><strong>Subnet Creation</strong> - Segment your network into logical subnets</li>
<li><strong>Route Configuration</strong> - Define traffic paths and destinations</li>
<li><strong>Security Controls</strong> - Implement firewalls and access controls</li>
<li><strong>Application Isolation</strong> - Secure and isolate your applications</li>
<li><strong>Internet Access Control</strong> - Manage public and private connectivity</li>
<li><strong>Hybrid Connectivity</strong> - Connect securely to on-premises networks</li>
</ul>

<h2>üöÄ How I Used Amazon VPC in This Project</h2>

<p>In this project, I implemented comprehensive traffic control between resources and the public internet through multiple VPC components:</p>

<ul>
<li><strong>Route Tables</strong> - Connected subnets to Internet Gateway (IGW)</li>
<li><strong>Security Groups</strong> - Protected individual resources within subnets</li>
<li><strong>Network ACLs</strong> - Guarded subnet-level inbound and outbound traffic</li>
<li><strong>Internet Gateway</strong> - Enabled public internet connectivity</li>
</ul>

<h2>üí° Key Learning: The Public Subnet Misconception</h2>

<p><strong>Unexpected Discovery:</strong> A public subnet can still not be truly "public" even with a public IP and Internet Gateway attached.</p>

<p><em>Critical Insight:</em> A public IP + an attached IGW aren't enough‚Äîwithout proper route table configuration, traffic cannot enter or leave the subnet. This demonstrates that all three components are essential for public connectivity:</p>

<ol>
<li>Public IP address</li>
<li>Internet Gateway attachment</li>
<li>Route table with proper routing rules</li>
</ol>

<h2>üõ£Ô∏è Route Tables Deep Dive</h2>

<h3>What Are Route Tables?</h3>

<p>Route tables are rule lists in a VPC that tell traffic where to go. Each subnet uses a route table to direct traffic to various destinations:</p>

<ul>
<li><strong>Internet destinations</strong> - Via Internet Gateway</li>
<li><strong>Other subnets</strong> - Within the same VPC</li>
<li><strong>On-premises networks</strong> - Via VPN or Direct Connect</li>
</ul>

<h3>Why Route Tables Are Essential for Public Subnets</h3>

<p>Route tables serve as the "map" for network traffic. A subnet becomes public only when its route table contains a route that sends all IPv4 traffic (<code>0.0.0.0/0</code>) to the Internet Gateway. Without this route configuration, traffic cannot enter or leave the subnet, regardless of public IP assignment.</p>

<h3>Route Destination and Target Configuration</h3>

<p>Routes are defined by two key components:</p>

<ul>
<li><strong>Destination</strong> - The range of IP addresses that traffic wants to reach</li>
<li><strong>Target</strong> - How traffic will reach that destination (local, IGW, VPN)</li>
</ul>

<p><strong>My Configuration:</strong></p>
<pre><code>Destination: 0.0.0.0/0 (all IPv4 addresses)
Target: NextWork IG (Internet Gateway)</code></pre>

<p>This route directs all internet-bound traffic to the newly configured Internet Gateway.</p>

<h2>üîí Security Groups Implementation</h2>

<h3>Overview</h3>

<p>Security Groups act as virtual firewalls for VPC resources (like EC2 instances). They provide stateful traffic filtering with the following characteristics:</p>

<ul>
<li><strong>Allow-only rules</strong> - Only permit rules, no explicit deny</li>
<li><strong>Stateful operation</strong> - Response traffic automatically allowed</li>
<li><strong>Default behavior</strong> - Block all traffic unless explicitly allowed</li>
<li><strong>Instance-level protection</strong> - Applied to individual resources</li>
</ul>

<h3>Inbound vs Outbound Rules</h3>

<p><strong>Inbound Rules:</strong></p>
<ul>
<li>Control data entering resources in the security group</li>
<li>My configuration: Allow all IP addresses to access resources</li>
<li>Used for controlling incoming connections and requests</li>
</ul>

<p><strong>Outbound Rules:</strong></p>
<ul>
<li>Control data that resources can send out</li>
<li>Default configuration: Allow all outbound traffic</li>
<li>Used for controlling resource-initiated connections</li>
</ul>

<h2>üõ°Ô∏è Network ACLs (Access Control Lists)</h2>

<h3>Functionality</h3>

<p>Network ACLs serve as subnet-level firewalls in a VPC with these characteristics:</p>

<ul>
<li><strong>Subnet-wide protection</strong> - Apply to entire subnets</li>
<li><strong>Allow and deny rules</strong> - Support both permit and block actions</li>
<li><strong>Stateless operation</strong> - Must configure both inbound and outbound rules</li>
<li><strong>Rule processing</strong> - Rules evaluated in numerical order</li>
<li><strong>Subnet guardrails</strong> - Provide broader network security controls</li>
</ul>

<h3>Security Groups vs Network ACLs Comparison</h3>

<table border="1" style="border-collapse: collapse; width: 100%;">
<tr style="background-color: #f2f2f2;">
<th style="padding: 8px; text-align: left;"><strong>Aspect</strong></th>
<th style="padding: 8px; text-align: left;"><strong>Security Groups</strong></th>
<th style="padding: 8px; text-align: left;"><strong>Network ACLs</strong></th>
</tr>
<tr>
<td style="padding: 8px;"><strong>Scope</strong></td>
<td style="padding: 8px;">Instance-level</td>
<td style="padding: 8px;">Subnet-level</td>
</tr>
<tr style="background-color: #f9f9f9;">
<td style="padding: 8px;"><strong>Rules</strong></td>
<td style="padding: 8px;">Allow-only</td>
<td style="padding: 8px;">Allow and Deny</td>
</tr>
<tr>
<td style="padding: 8px;"><strong>State</strong></td>
<td style="padding: 8px;">Stateful</td>
<td style="padding: 8px;">Stateless</td>
</tr>
<tr style="background-color: #f9f9f9;">
<td style="padding: 8px;"><strong>Rule Processing</strong></td>
<td style="padding: 8px;">All rules evaluated</td>
<td style="padding: 8px;">Ordered evaluation</td>
</tr>
<tr>
<td style="padding: 8px;"><strong>Response Traffic</strong></td>
<td style="padding: 8px;">Automatically allowed</td>
<td style="padding: 8px;">Must be explicitly allowed</td>
</tr>
</table>

<h3>Default vs Custom Network ACLs</h3>

<p><strong>Default Network ACL Behavior:</strong></p>
<ul>
<li><strong>Inbound rules:</strong> Allow all inbound traffic into the subnet</li>
<li><strong>Outbound rules:</strong> Allow all outbound traffic from the subnet</li>
<li><strong>Philosophy:</strong> Permissive by default, rely on Security Groups for filtering</li>
</ul>

<p><strong>Custom Network ACL Behavior:</strong></p>
<ul>
<li><strong>Inbound rules:</strong> Deny all inbound access by default</li>
<li><strong>Outbound rules:</strong> Deny all outbound access by default</li>
<li><strong>Philosophy:</strong> Restrictive by default, explicit allow rules required</li>
</ul>

<h2>üèÜ Project Outcomes and Skills Demonstrated</h2>

<h3>Successfully Implemented</h3>
<p>‚úÖ <strong>VPC Network Architecture</strong> - Complete network design and implementation<br>
‚úÖ <strong>Route Table Configuration</strong> - Proper traffic routing setup<br>
‚úÖ <strong>Internet Gateway Integration</strong> - Public internet connectivity<br>
‚úÖ <strong>Multi-layered Security</strong> - Security Groups and Network ACLs<br>
‚úÖ <strong>Traffic Flow Control</strong> - Inbound and outbound traffic management</p>

<h3>Technical Skills Acquired</h3>
<ul>
<li><strong>VPC Design Principles</strong> - Network segmentation and architecture</li>
<li><strong>Routing Fundamentals</strong> - Traffic path determination and configuration</li>
<li><strong>Security Implementation</strong> - Layered security approach</li>
<li><strong>Network Troubleshooting</strong> - Understanding connectivity requirements</li>
<li><strong>AWS Networking Services</strong> - Practical experience with core components</li>
</ul>

<h2>üîç Key Insights and Best Practices</h2>

<h3>Critical Understanding</h3>
<ol>
<li><strong>Public Subnet Requirements</strong> - All three components (public IP, IGW, route table) must be properly configured</li>
<li><strong>Defense in Depth</strong> - Multiple security layers provide comprehensive protection</li>
<li><strong>Stateful vs Stateless</strong> - Understanding the difference is crucial for proper configuration</li>
<li><strong>Rule Evaluation Order</strong> - Network ACL rules are processed sequentially</li>
</ol>

<h3>Network Security Best Practices</h3>
<ul>
<li><strong>Least Privilege Access</strong> - Only allow necessary traffic</li>
<li><strong>Layered Security</strong> - Use both Security Groups and Network ACLs</li>
<li><strong>Regular Review</strong> - Audit rules and configurations periodically</li>
<li><strong>Documentation</strong> - Maintain clear records of network configurations</li>
</ul>

<h2>üîÑ Future Enhancements</h2>

<h3>Advanced Networking Features</h3>
<ul>
<li><strong>VPC Peering</strong> - Connect multiple VPCs</li>
<li><strong>NAT Gateway</strong> - Enable private subnet internet access</li>
<li><strong>VPC Endpoints</strong> - Private connectivity to AWS services</li>
<li><strong>Transit Gateway</strong> - Centralized connectivity hub</li>
<li><strong>AWS PrivateLink</strong> - Secure service connectivity</li>
</ul>

<h3>Monitoring and Automation</h3>
<ul>
<li><strong>VPC Flow Logs</strong> - Network traffic analysis</li>
<li><strong>CloudWatch Metrics</strong> - Network performance monitoring</li>
<li><strong>Infrastructure as Code</strong> - Automated network provisioning</li>
<li><strong>Security Automation</strong> - Automated compliance checking</li>
</ul>

<h2>üéì Learning Resources</h2>

<h3>AWS Documentation</h3>
<ul>
<li><a href="https://docs.aws.amazon.com/vpc/">Amazon VPC User Guide</a></li>
<li><a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html">Security Groups Guide</a></li>
<li><a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs Guide</a></li>
</ul>

<h3>Best Practices Resources</h3>
<ul>
<li><a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-security-best-practices.html">VPC Security Best Practices</a></li>
<li><a href="https://aws.amazon.com/architecture/well-architected/">AWS Well-Architected Framework</a></li>
</ul>

<h2>ü§ù Project Reflection</h2>

<p>This AWS VPC project provided essential hands-on experience with cloud networking fundamentals. The most valuable insight was discovering that public subnet connectivity requires proper coordination between multiple components, not just individual service configuration.</p>

<p><strong>Key Takeaway:</strong> Effective cloud networking requires understanding the interplay between different services and components. A holistic approach to network design ensures both functionality and security.</p>

<hr>

<p><strong>Project Duration:</strong> 2 hours<br>
<strong>Project Source:</strong> <a href="https://nextwork.org">NextWork.org</a> - VPC Traffic Flow and Security<br>
<strong>Skill Level:</strong> Intermediate AWS Networking</p>

<p><em>This project demonstrates practical AWS networking implementation suitable for cloud engineering roles and technical portfolio presentation.</em></p>